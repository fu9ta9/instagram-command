generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  facebookAccessToken  String?
  accounts      Account[]
  sessions      Session[]
  replies       Reply[]   // ここを変更
  membershipType MembershipType @default(FREE)
  trialStartDate DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reply {
  id            Int      @id @default(autoincrement())
  keyword       String
  reply         String
  userId        String
  postId        String?
  replyType     Int      // 1: SPECIFIC_POST, 2: ALL_POSTS, 3: STORY
  matchType     Int      // 1: EXACT, 2: PARTIAL
  buttons       Button[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([keyword, replyType, matchType])
}

model Button {
  id        Int     @id @default(autoincrement())
  reply     Reply   @relation(fields: [replyId], references: [id])
  replyId   Int
  title     String
  url       String
  order     Int
}

model ExecutionLog {
  id            Int      @id @default(autoincrement())
  timestamp     DateTime @default(now())
  errorMessage  String?

  @@map("execution_logs")
}

enum MembershipType {
  FREE
  TRIAL
  PAID
}
