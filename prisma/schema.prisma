generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model IGAccount {
  id                String   @id @default(cuid())
  userId            String
  instagramId       String   @unique
  username          String
  profilePictureUrl String?
  accessToken       String
  expiresAt         Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  webhookId         String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies           Reply[]

  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String            @id @default(cuid())
  name           String?
  email          String?           @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  membershipType MembershipType    @default(FREE)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  trialStartDate DateTime?
  accounts       Account[]
  igAccounts     IGAccount[]
  sessions       Session[]
  subscription   UserSubscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reply {
  id                  Int         @id @default(autoincrement())
  keyword             String
  reply               String
  postId              String?
  replyType           Int
  matchType           Int
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  igAccountId         String
  commentReplyEnabled Boolean     @default(false)
  messageType         String      @default("text") // "text", "template"
  buttons             Button[]
  posts               Post[]      // 投稿選択用
  igAccount           IGAccount   @relation(fields: [igAccountId], references: [id], onDelete: Cascade)
  stats               ReplyStats?

  @@index([keyword, replyType, matchType])
}

model Button {
  id        Int     @id @default(autoincrement())
  reply     Reply   @relation(fields: [replyId], references: [id])
  replyId   Int
  title     String
  url       String
  order     Int
}

model ReplyStats {
  id          Int      @id @default(autoincrement())
  replyId     Int      @unique
  sentCount   Int      @default(0)
  readCount   Int      @default(0)
  lastUpdated DateTime @default(now()) @updatedAt
  
  reply       Reply    @relation(fields: [replyId], references: [id], onDelete: Cascade)
  
  @@index([replyId])
}

model ExecutionLog {
  id           Int      @id @default(autoincrement())
  timestamp    DateTime @default(now())
  errorMessage String?

  @@map("execution_logs")
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String    @unique
  stripeSubscriptionId   String    @unique
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime
  endDate                DateTime?
  status                 String?
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Post {
  id               Int       @id @default(autoincrement())
  reply            Reply     @relation(fields: [replyId], references: [id])
  replyId          Int
  title            String    // カルーセルのタイトル
  postId           String    // Instagram投稿ID（必須）
  order            Int       // 表示順序
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum MembershipType {
  FREE
  TRIAL
  PAID
}
