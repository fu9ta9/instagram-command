generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model IGAccount {
  id                String  @id @default(cuid())
  userId            String
  instagramId       String  @unique              // Instagramのアカウント識別子
  username          String
  profilePictureUrl String?
  accessToken       String  @db.Text
  expiresAt         Int?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies Reply[]

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  trialStartDate DateTime?  // トライアル開始日のみを保持
  membershipType MembershipType @default(FREE)
  
  subscription  UserSubscription?
  sessions     Session[]
  igAccounts   IGAccount[]  // 名前を変更
  accounts     Account[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reply {
  id            Int      @id @default(autoincrement())
  keyword       String
  reply         String
  igAccountId   String   // IGAccount.idを参照
  postId        String?
  replyType     Int      // 1: SPECIFIC_POST, 2: ALL_POSTS, 3: STORY
  matchType     Int      // 1: EXACT, 2: PARTIAL
  buttons       Button[]
  
  igAccount     IGAccount @relation(fields: [igAccountId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([keyword, replyType, matchType])
}

model Button {
  id        Int     @id @default(autoincrement())
  reply     Reply   @relation(fields: [replyId], references: [id])
  replyId   Int
  title     String
  url       String
  order     Int
}

model ExecutionLog {
  id            Int      @id @default(autoincrement())
  timestamp     DateTime @default(now())
  errorMessage  String?

  @@map("execution_logs")
}

enum MembershipType {
  FREE
  TRIAL
  PAID
}

model UserSubscription {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  stripeCustomerId       String   @unique
  stripeSubscriptionId   String   @unique
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime
  status                 String?
  endDate                DateTime?
  
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
